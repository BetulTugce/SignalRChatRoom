@page "/"
@using Microsoft.AspNetCore.SignalR.Client

@rendermode InteractiveServer

<PageTitle>Chat Room</PageTitle>

@if (!IsAuthenticate)
{
    <InputText @bind-Value="CallerUsername" Label="Kullanıcı adı"></InputText>
    <button @onclick=SignIn>Giriş Yap</button>
}
else
{
    <Toasts class="p-3" Messages="NotificationMessages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

    @* Sistemdeki clientlar listeleniyor.. *@
    <div class="row">
        <div class="col-4">
            <div class="list-group" id="list-tab" role="tablist">
                @foreach (var client in Clients)
                {
                    @* <a class="list-group-item list-group-item-action active" id="list-home-list" data-toggle="list" role="tab" aria-controls="home">@client.Username</a> *@
                    <a class="list-group-item list-group-item-action @(client == selectedClient ? "active" : "")" id="list-@client.ConnectionId-list" data-toggle="list" role="tab" aria-controls="@client.Username" @onclick="@(() => SelectClient(client))">@client.Username</a>
                }
            </div>
        </div>
        <div class="col-8">
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="list-home" role="tabpanel" aria-labelledby="list-home-list">...</div>
                <div class="tab-pane fade" id="list-profile" role="tabpanel" aria-labelledby="list-profile-list">...</div>
                <div class="tab-pane fade" id="list-messages" role="tabpanel" aria-labelledby="list-messages-list">...</div>
                <div class="tab-pane fade" id="list-settings" role="tabpanel" aria-labelledby="list-settings-list">...</div>
            </div>
        </div>
    </div>

    @* Callerın seçili clientlarla olan mesajları listeleniyor.. *@
    <div class="container">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <h1 class="text-center">Sohbet</h1>
                <div class="messages">
                    @for (int i = 0; i < SelectedUserMessages.Count; i++)
                    {
                        @* if (Messages[i].ReceiverClientUsername == Messages[i].SenderClientUsername) *@
                        if (SelectedUserMessages[i].IsSenderReceiver)
                        {
                            <div class="message mine">
                                <strong>Ben</strong>: @SelectedUserMessages[i].Message
                            </div>
                        }else
                        {
                            <div class="message theirs">
                                <strong>@SelectedUserMessages[i].SenderClientUsername</strong>: @SelectedUserMessages[i].Message
                            </div>
                        }
                    }
                </div>
                <div class="input-group">
                    <input type="text" class="form-control" @bind-value="TextMessage" placeholder="Mesajınızı yazın...">
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick=@(() => SendMessageAsync(TextMessage))>Gönder</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    List<ToastMessage> NotificationMessages = new List<ToastMessage>();

    List<ClientMessage> Messages = new List<ClientMessage>(); // Clientla alakalı mesajları tutacak olan liste..

    public string CallerUsername { get; set; } = String.Empty; // Kişinin login olurken girdiği username bilgisi..
    public string TextMessage { get; set; } = String.Empty; // Gönderilecek mesaj

    // Client giriş yapmış mı yapmamış mı kontrol ediliyor.. (Veritabanı bağlantısı yok, veriler InMemoryde tutuluyor. Sadece username bilgisi girip girmediği kontrol ediliyor..)
    public bool IsAuthenticate { get; set; } = false;

    private List<Client> Clients { get; set; } = new List<Client>(); // Sisteme giriş yapan tüm clientların bilgisini tutan liste..
    class Client()
    {
        public string ConnectionId { get; set; }
        public string Username { get; set; }
    }
    class ClientMessage()
    {
        public string ReceiverClientUsername { get; set; }
        public string SenderClientUsername { get; set; }
        public string Message { get; set; }
        public bool IsSenderReceiver { get; set; } = false;
    }


    // SignalR hub'ına bağlantıyı sağlar..
    private HubConnection hubConnection;

    // Bileşen başlatıldığında yapılacaklar
    protected override async Task OnInitializedAsync()
    {
        // SignalR hubına bağlantı oluşturur..
        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7038/chathub") // Bağlanılacak hub URLini belirler..
        .Build();

        // Sunucudan gelen bildirileri işler..

        // Sisteme yeni bir kullanıcı dahil olduğunda tüm clientlara bildirecek.. Server tarafından tetikleniyor..
        hubConnection.On<string>("clientJoined", async (username) =>
        {
            NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"{username} adlı kullanıcı sisteme giriş yaptı."));

            await InvokeAsync(StateHasChanged); // UI güncellemesi için InvokeAsync metodu çağırılıyor..
        });

        // Sistemdeki clientların listesi güncellendiğinde (client giriş çıkışlarında) server tarafından tetiklenerek güncel liste alınacak..
        hubConnection.On<List<Client>>("clients", async (clientList) =>
        {
            Clients = clientList;
            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });

        // Bir callerın sistemdeki herhangi bir clienta mesaj atma durumunda server tarafından tetiklenecek..
        hubConnection.On<string, Client, Client>("receiveMessage", async (message, client, senderClient) =>
        {
            // Clienta gönderilen mesajları tutan listeye mesaj ekleniyor..
            Messages.Add(new ClientMessage() { ReceiverClientUsername = client.Username, SenderClientUsername = senderClient.Username, Message = message });

            // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
            FilterUserMessages(selectedClient.Username);

            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });

        await hubConnection.StartAsync(); // Hub bağlantısını başlatır..

        await hubConnection.SendAsync("GetClientsAsync"); // Kullanıcı giriş yaptığında tüm clientların listesini çeker.. (Client serverı tetikliyor..)
    }

    // Login işlemi..
    async Task SignIn()
    {
        // Serverdaki GetUsernameAsync methodu tetiklenerek kullanıcı girişi yapıldığı server tarafından clienttaki clientJoined methodu tetiklenerek caller haricindeki tüm clientlara bildiriliyor ve benzeri şekilde Clients listesi güncelleniyor..
        await hubConnection.SendAsync("GetUsernameAsync", CallerUsername);
        IsAuthenticate = true;
        await InvokeAsync(StateHasChanged); // UI güncellemesi..
    }

    List<ClientMessage> SelectedUserMessages = new List<ClientMessage>(); // Seçilen clientla ve callerla alakalı mesajları tutacak olan liste..

    // Messsages listesinden parametrede gelen clientın attığı ve o usernamee atılan mesajları filtreler..
    void FilterUserMessages(string receiverClientName)
    {
        SelectedUserMessages = Messages.Where(msg => msg.ReceiverClientUsername == receiverClientName || msg.SenderClientUsername == receiverClientName).ToList();
    }

    private Client selectedClient = new Client();
    private void SelectClient(Client client)
    {
        // Mesaj gönderilecek client bilgisi selectedClienta atanıyor..
        selectedClient = client;

        // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
        FilterUserMessages(client.Username);
    }

    // Caller bir clienta ya da tüm clientlara mesaj gönderecekse serverı tetikler..
    async Task SendMessageAsync(string message)
    {
        // Serverdaki SendMessageAsync methodu tetiklenerek seçilen clienta mesajın gönderilme işlemi gerçekleştiriliyor..
        await hubConnection.SendAsync("SendMessageAsync", message, selectedClient);

        // Mesajı gönderen clientta da göstermek için mesaj Messages listesine ekleniyor.. 
        Messages.Add(new ClientMessage() { Message = message, ReceiverClientUsername = selectedClient.Username, SenderClientUsername = CallerUsername, IsSenderReceiver = true });

        // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
        FilterUserMessages(selectedClient.Username);
        StateHasChanged();

        // Mesaj temizleniyor..
        TextMessage = string.Empty;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Kullanıcı Girişi",
            HelpText = $"{DateTime.Now}",
            Message = $"{message}",
        };
}
