@page "/"
@using Microsoft.AspNetCore.SignalR.Client

@rendermode InteractiveServer

<PageTitle>Chat Room</PageTitle>

<style>
    /* main-container {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    } */

    .container {
        display: inline-flex;
    }

    .users {
        width: 200px;
        background-color: #f2f2f2;
        padding: 20px;
        border: 1px solid #e0e0e0;
        box-sizing: border-box;
    }

        .users h3 {
            margin-top: 0;
            padding: 10px;
        }

        .users ul {
            list-style-type: none;
            overflow-y: auto;
            max-height: 330px;
            padding: 0;
        }

        .users .user {
            cursor: pointer;
            padding: 10px;
            margin-bottom: 5px;
            background-color: #e0e0e0;
        }

            .users .user.active {
                background-color: #ffff;
            }

    .user.disabled {
        pointer-events: none; /* Tıklanabilirliği devre dışı bırakır */
        opacity: 0.5; /* Devre dışı bırakılmış gibi bir görünüm sağlar */
    }

    .conversation {
        flex: 1;
        padding: 20px;
        border: 1px solid #e0e0e0;
        box-sizing: border-box;
    }

        .conversation .header {
            background-color: #e0e0e0;
            padding: 10px;
            margin-bottom: 20px;
        }

    .messages {
        overflow-y: auto;
        max-height: 400px;
        min-height: 400px;
    }

    .message {
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        /* max-width: 70%; */
        max-width:max-content;
    }

    .sent {
        background-color: #DCF8C6;
        align-self: flex-end;
        margin-right: 0px !important;
        margin-left: auto; /* flexbox alignment rule */
    }

    .received {
        background-color: #ECE5DD;
    }

    .time {
        font-size: 12px;
        color: #666;
    }

    button, input, optgroup, select, textarea {
        margin: 0;
        font-family: inherit;
        font-size: inherit;
        line-height: inherit;
        max-width: -webkit-fill-available;
    }

    .input-area {
        margin-top: 20px;
    }

        .input-area input {
            width: calc(100% - 80px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px 0 0 5px;
        }

        .input-area button {
            width: 70px;
            padding: 10px;
            background-color: #4CAF50;
            color: #fff;
            border: none;
            border-radius: 0 5px 5px 0;
            cursor: pointer;
            float: right;
        }

            .input-area button:hover {
                background-color: #45a049;
            }

    .addGroup {
        margin-top: 10px;
        background-color: #e0e0e0;
        border: none;
        border-radius: 0 5px 5px 0;
    }
</style>
@if (!IsAuthenticate)
{
    <InputText @bind-Value="CallerUsername" Label="Kullanıcı adı"></InputText>
    <button @onclick=SignIn>Giriş Yap</button>
}
else
{
    @* <div class="main-container"> *@

        <Toasts class="p-3" Messages="NotificationMessages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

        
        <div class="container">

            @* Sistemdeki odalar/gruplar listeleniyor.. *@
            <div class="users">
                <div>
                    <input type="text" @bind-value="GroupNameText" placeholder="Grup Adı">
                    <button class="addGroup" @onclick=@(() => AddGroup(GroupNameText))>Grup Ekle</button>
                </div>
                <h3>Odalar</h3>
                <ul>
                    @foreach (var group in Groups)
                    {
                        <li class="user @(group == selectedGroup ? "active" : "")" @onclick="@(() => SelectGroup(group))">@group.GroupName</li>
                    }
                </ul>
            </div>
            @* Seçili oda/gruba dahil olan clientlar listeleniyor.. *@
            <div class="users">
                @if (!string.IsNullOrEmpty(selectedGroup.GroupName))
                {
                    <h3>@selectedGroup.GroupName Üyeleri </h3>
                    <ul>
                        @foreach (var client in ClientsOfGroups)
                        {
                            <li class="user">@client.Username</li>
                        }
                    </ul>
                }
            </div>

            @* Sistemdeki clientlar listeleniyor.. *@
            <div class="users">
                <h3>Tüm Kullanıcılar</h3>
                <ul>
                    @foreach (var client in Clients)
                    {
                        <li class="user @(client == selectedClient ? "active" : "") @(client.Username.Equals(CallerUsername) ? "disabled" : "")" @onclick="@(() => SelectClient(client))"  >@client.Username</li>
                    }
                </ul>
            </div>

            @* Callerın seçili clientlarla olan mesajları listeleniyor.. *@
            <div class="conversation">
                @if (selectedClient.Username != null)
                {
                    <div class="header">
                        <h3>@selectedClient.Username</h3>
                    </div>
                }
                <div class="messages">
                    @for (int i = 0; i < SelectedUserMessages.Count; i++)
                    {
                        <div class="message @(SelectedUserMessages[i].IsSenderReceiver ? "sent" : "received")">
                            <p>@SelectedUserMessages[i].Message</p>
                            @* <span class="time">12:00</span> *@
                        </div>
                    }
                </div>
                <div class="input-area">
                    <input @onkeyup="@(e => KeyHandler(e))" type="text" @bind-value="TextMessage" placeholder="Mesajınızı buraya yazın..">
                    <button @onclick=@(() => SendMessageAsync(TextMessage))>Gönder</button>
                </div>
            </div>
        </div>
    @* </div> *@
}

@code {
    List<ToastMessage> NotificationMessages = new List<ToastMessage>();

    List<ClientMessage> Messages = new List<ClientMessage>(); // Clientla alakalı mesajları tutacak olan liste..

    public string CallerUsername { get; set; } = String.Empty; // Kişinin login olurken girdiği username bilgisi..
    public string TextMessage { get; set; } = String.Empty; // Gönderilecek mesaj
    public string GroupNameText { get; set; } = String.Empty; // Gönderilecek mesaj

    // Client giriş yapmış mı yapmamış mı kontrol ediliyor.. (Veritabanı bağlantısı yok, veriler InMemoryde tutuluyor. Sadece username bilgisi girip girmediği kontrol ediliyor..)
    public bool IsAuthenticate { get; set; } = false;

    private List<Client> ClientsOfGroups { get; set; } = new List<Client>(); // Belirli bir gruptaki clientları tutan liste..
    private List<Client> Clients { get; set; } = new List<Client>(); // Sisteme giriş yapan tüm clientların bilgisini tutan liste..
    class Client()
    {
        public string ConnectionId { get; set; }
        public string Username { get; set; }
    }
    class ClientMessage()
    {
        public string ReceiverClientUsername { get; set; }
        public string SenderClientUsername { get; set; }
        public string Message { get; set; }
        public bool IsSenderReceiver { get; set; } = false;
    }

    private List<Group> Groups { get; set; } = new List<Group>(); // Sistemde oluşturulan odaların bilgisini tutan liste..
    class Group()
    {
        public string GroupName { get; set; }
        public List<Client> Clients { get; } = new List<Client>();
    }

    // SignalR hub'ına bağlantıyı sağlar..
    private HubConnection hubConnection;

    // Bileşen başlatıldığında yapılacaklar
    protected override async Task OnInitializedAsync()
    {
        // SignalR hubına bağlantı oluşturur..
        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7038/chathub") // Bağlanılacak hub URLini belirler..
        .Build();

        // Sunucudan gelen bildirileri işler..

        // Sisteme yeni bir kullanıcı dahil olduğunda tüm clientlara bildirecek.. Server tarafından tetikleniyor..
        hubConnection.On<string>("clientJoined", async (username) =>
        {
            NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"{username} adlı kullanıcı sisteme giriş yaptı."));

            await InvokeAsync(StateHasChanged); // UI güncellemesi için InvokeAsync metodu çağırılıyor..
        });

        // Sistemdeki clientların listesi güncellendiğinde (client giriş çıkışlarında) server tarafından tetiklenerek güncel liste alınacak..
        hubConnection.On<List<Client>>("clients", async (clientList) =>
        {
            Clients = clientList;
            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });
        
        // Sistemdeki bir gruba ait clientların listesi güncellendiğinde (client giriş çıkışlarında) server tarafından tetiklenerek güncel liste alınacak..
        hubConnection.On<List<Client>>("clientsOfGroup", async (clientList) =>
        {
            ClientsOfGroups = clientList;
            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });

        // Sisteme yeni bir oda/grup eklendiğinde tüm clientlara bildirecek.. Server tarafından tetikleniyor..
        hubConnection.On<string>("groupAdded", async (groupName) =>
        {
            NotificationMessages.Add(CreateToastMessage(ToastType.Info, $"{groupName} adında yeni bir oda oluşturuldu."));

            await InvokeAsync(StateHasChanged); // UI güncellemesi için InvokeAsync metodu çağırılıyor..
        });

        // Sistemdeki grupların/odaların listesi güncellendiğinde server tarafından tetiklenerek güncel liste alınacak..
        hubConnection.On<List<Group>>("groups", async (groupList) =>
        {
            Groups = groupList;
            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });

        // Bir callerın sistemdeki herhangi bir clienta mesaj atma durumunda server tarafından tetiklenecek..
        hubConnection.On<string, Client, Client>("receiveMessage", async (message, client, senderClient) =>
        {
            // Clienta gönderilen mesajları tutan listeye mesaj ekleniyor..
            Messages.Add(new ClientMessage() { ReceiverClientUsername = client.Username, SenderClientUsername = senderClient.Username, Message = message });

            // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
            FilterUserMessages(selectedClient.Username);

            await InvokeAsync(StateHasChanged); // UI güncellemesi..
        });

        await hubConnection.StartAsync(); // Hub bağlantısını başlatır..

        await hubConnection.SendAsync("GetClientsAsync"); // Kullanıcı giriş yaptığında tüm clientların listesini çeker.. (Client serverı tetikliyor..)
    }

    // Login işlemi..
    async Task SignIn()
    {
        // Serverdaki GetUsernameAsync methodu tetiklenerek kullanıcı girişi yapıldığı server tarafından clienttaki clientJoined methodu tetiklenerek caller haricindeki tüm clientlara bildiriliyor ve benzeri şekilde Clients listesi güncelleniyor..
        await hubConnection.SendAsync("GetUsernameAsync", CallerUsername);
        IsAuthenticate = true;
        await InvokeAsync(StateHasChanged); // UI güncellemesi..
    }

    List<ClientMessage> SelectedUserMessages = new List<ClientMessage>(); // Seçilen clientla ve callerla alakalı mesajları tutacak olan liste..

    // Messsages listesinden parametrede gelen clientın attığı ve o usernamee atılan mesajları filtreler..
    void FilterUserMessages(string receiverClientName)
    {
        SelectedUserMessages = Messages.Where(msg => msg.ReceiverClientUsername == receiverClientName || msg.SenderClientUsername == receiverClientName).ToList();
    }

    private Client selectedClient = new Client();
    private void SelectClient(Client client)
    {
        // Mesaj gönderilecek client bilgisi selectedClienta atanıyor..
        selectedClient = client;

        // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
        FilterUserMessages(client.Username);
    }

    private Group selectedGroup = new Group();
    private async Task SelectGroup(Group group)
    {
        // Mesaj gönderilecek grup bilgisi selectedGroupa atanıyor..
        selectedGroup = group;
        await AddClientToGroup(selectedGroup.GroupName);

        await GetClientsOfGroup(selectedGroup.GroupName);

        // Seçilen grubun GroupNameine göre o grupla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
        FilterUserMessages(group.GroupName);
    }

    // Caller bir clienta ya da tüm clientlara mesaj gönderecekse serverı tetikler..
    async Task SendMessageAsync(string message)
    {
        // Mesaj yazmadan butona tıklanırsa kodlar çalışmayacak..
        if (!string.IsNullOrEmpty(message))
        {
            // Serverdaki SendMessageAsync methodu tetiklenerek seçilen clienta mesajın gönderilme işlemi gerçekleştiriliyor..
            await hubConnection.SendAsync("SendMessageAsync", message, selectedClient);

            // Mesajı gönderen clientta da göstermek için mesaj Messages listesine ekleniyor..
            Messages.Add(new ClientMessage() { Message = message, ReceiverClientUsername = selectedClient.Username, SenderClientUsername = CallerUsername, IsSenderReceiver = true });

            // Seçilen clientın usernameine göre o clientla olan mesajlaşmaları filtreleyerek SelectedUserMessages listesine atar..
            FilterUserMessages(selectedClient.Username);
            StateHasChanged();

            // Mesaj temizleniyor..
            TextMessage = string.Empty;
        }
    }

    // Caller bir oda oluştururken tetiklenir..
    async Task AddGroup(string groupNameText)
    {
        // Grup adı yazmadan butona tıklanırsa kodlar çalışmayacak..
        if (!string.IsNullOrEmpty(groupNameText))
        {
            // Serverdaki AddGroupAsync methodu tetiklenerek grup oluşturma işlemi gerçekleştiriliyor..
            await hubConnection.SendAsync("AddGroupAsync", groupNameText);

            // Grup oluşturma inputu temizleniyor..
            groupNameText = string.Empty;
        }
    }

    // Caller bir odaya girerken tetiklenir..
    async Task AddClientToGroup(string groupName)
    {
        // Serverdaki AddClientToGroupAsync methodu tetiklenerek seçilen gruba callerın dahil olması sağlanıyor..
        await hubConnection.SendAsync("AddClientToGroupAsync", groupName);
    }
    
    // Tetiklendiğinde ilgili gruba ait tüm clientların listesini döndürür....
    async Task GetClientsOfGroup(string groupName)
    {
        // Serverdaki GetClientsOfGroupAsync methodu tetiklenerek seçilen gruba subscribe olmuş tüm clientların listesini döndürür ve server tarafından clienttaki clients methodu tetiklenir..
        await hubConnection.SendAsync("GetClientsOfGroupAsync", groupName);
    }

    // Mesaj yazılan inputta Entera basılırsa SendMessageAsync fonksiyonunu tetikler..
    private async Task KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageAsync(TextMessage);
        }
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Kullanıcı Girişi",
            HelpText = $"{DateTime.Now}",
            Message = $"{message}",
        };
}
